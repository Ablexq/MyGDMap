apply plugin: 'com.android.application'

//获取properties
def keystorePropertiesFile = rootProject.file("sign.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        debug {
            keyAlias keystoreProperties['keyAlias_debug']
            keyPassword keystoreProperties['keyPassword_debug']
            storeFile file(keystoreProperties['storeFile_debug'])
            storePassword keystoreProperties['storePassword_debug']
        }
    }

    def android = rootProject.ext.android
    compileSdkVersion android["compileSdkVersion"]
    buildToolsVersion android.buildToolsVersion
    defaultConfig {
        applicationId android.applicationId
        minSdkVersion android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        versionCode android.versionCode
        versionName android.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //修改
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //修改
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        targetCompatibility = '1.8'
        sourceCompatibility = '1.8'
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def dependencies = rootProject.ext.dependencies
    implementation dependencies["constraint-layout"]
    implementation dependencies["appcompat-v7"]
    implementation dependencies.design
    if (!rootProject.ext.isPermissionApplication) {
        implementation project(':map-permission')
    }
    if (!rootProject.ext.isBglocationApplication) {
        implementation project(':backgroundlocation')
    }
    if (!rootProject.ext.isServicelocationApplication) {
        implementation project(':service-location')
    }
    if (!rootProject.ext.isLocationHighApplication) {
        implementation project(':location-hight-accuracy')
    }

    /*导航*/
    if (!rootProject.ext.isNaviMasterApplication) {
        implementation project(':navi-master')
    }
    if (!rootProject.ext.isNaviQuickApplication) {
        implementation project(':navi-quick')
    }
    if (!rootProject.ext.isNaviFragApplication) {
        implementation project(':navi-fragment')
    }

    /* 轨迹 */
    if (!rootProject.ext.isPathRecordApplication) {
        implementation project(':path-record')
    }
    if (!rootProject.ext.isPathSmoothApplication) {
        implementation project(':path-smooth')
    }
    if (!rootProject.ext.isSmoothMoveApplication) {
        implementation project(':smooth-move')
    }


    /*  */
    if (!rootProject.ext.isMovePointApplication) {
        implementation project(':moving_point')
    }
    if (!rootProject.ext.isMakerMoveApplication) {
        implementation project(':markermove')
    }
    if (!rootProject.ext.isRotationApplication) {
        implementation project(':location-rotation')
    }
    if (!rootProject.ext.isInfoWindowApplication) {
        implementation project(':infowindows')
    }
    if (!rootProject.ext.isDriveRouteApplication) {
        implementation project(':drive-route')
    }
    if (!rootProject.ext.isCustomZoomApplication) {
        implementation project(':customzoom')
    }
    if (!rootProject.ext.isDriveRoutePlanApplication) {
        implementation project(':drive-route-plan')
    }
    if (!rootProject.ext.isAppbarApplication) {
        implementation project(':appbarlayout')
    }
}